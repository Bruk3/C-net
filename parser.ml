type token =
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | LBRACKET
  | RBRACKET
  | COMMA
  | SEMI
  | SQUOTE
  | DQUOTE
  | MOD
  | ASSIGN
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | PLUSEQ
  | MINUSEQ
  | DOT
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | AND
  | OR
  | NOT
  | IF
  | ELSE
  | FOR
  | WHILE
  | RETURN
  | BREAK
  | CONTINUE
  | NOELSE
  | INT
  | FLOAT
  | CHAR
  | STRING
  | VOID
  | STRUCT
  | SOCKET
  | TCP
  | UDP
  | NEW
  | DELETE
  | INTLIT of (int)
  | CHARLIT of (int)
  | FLOATLIT of (float)
  | STRLIT of (string)
  | ID of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
# 4 "parser.mly"
    open Ast
# 61 "parser.ml"
let yytransl_const = [|
  257 (* LPAREN *);
  258 (* RPAREN *);
  259 (* LBRACE *);
  260 (* RBRACE *);
  261 (* LBRACKET *);
  262 (* RBRACKET *);
  263 (* COMMA *);
  264 (* SEMI *);
  265 (* SQUOTE *);
  266 (* DQUOTE *);
  267 (* MOD *);
  268 (* ASSIGN *);
  269 (* PLUS *);
  270 (* MINUS *);
  271 (* TIMES *);
  272 (* DIVIDE *);
  273 (* PLUSEQ *);
  274 (* MINUSEQ *);
  275 (* DOT *);
  276 (* EQ *);
  277 (* NEQ *);
  278 (* LT *);
  279 (* LEQ *);
  280 (* GT *);
  281 (* GEQ *);
  282 (* AND *);
  283 (* OR *);
  284 (* NOT *);
  285 (* IF *);
  286 (* ELSE *);
  287 (* FOR *);
  288 (* WHILE *);
  289 (* RETURN *);
  290 (* BREAK *);
  291 (* CONTINUE *);
  292 (* NOELSE *);
  293 (* INT *);
  294 (* FLOAT *);
  295 (* CHAR *);
  296 (* STRING *);
  297 (* VOID *);
  298 (* STRUCT *);
  299 (* SOCKET *);
  300 (* TCP *);
  301 (* UDP *);
  302 (* NEW *);
  303 (* DELETE *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  304 (* INTLIT *);
  305 (* CHARLIT *);
  306 (* FLOATLIT *);
  307 (* STRLIT *);
  308 (* ID *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\003\000\003\000\003\000\007\000\007\000\
\007\000\007\000\007\000\007\000\007\000\007\000\008\000\008\000\
\004\000\005\000\006\000\009\000\009\000\011\000\011\000\010\000\
\010\000\012\000\012\000\014\000\013\000\013\000\013\000\013\000\
\013\000\013\000\013\000\013\000\013\000\016\000\016\000\017\000\
\017\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
\015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
\015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
\015\000\015\000\015\000\015\000\019\000\019\000\020\000\020\000\
\018\000\018\000\000\000"

let yylen = "\002\000\
\002\000\002\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\002\000\003\000\002\000\001\000\
\003\000\006\000\008\000\000\000\001\000\002\000\004\000\000\000\
\001\000\002\000\001\000\005\000\002\000\003\000\007\000\005\000\
\009\000\005\000\001\000\001\000\003\000\000\000\001\000\000\000\
\003\000\001\000\001\000\001\000\001\000\001\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\002\000\002\000\003\000\
\006\000\002\000\004\000\004\000\001\000\003\000\000\000\001\000\
\001\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\009\000\010\000\008\000\011\000\007\000\000\000\
\012\000\075\000\000\000\003\000\004\000\005\000\006\000\000\000\
\000\000\001\000\002\000\000\000\000\000\000\000\014\000\000\000\
\017\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\
\013\000\000\000\000\000\015\000\022\000\000\000\000\000\018\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\042\000\043\000\044\000\045\000\
\000\000\035\000\000\000\000\000\000\000\027\000\036\000\000\000\
\000\000\023\000\000\000\000\000\062\000\063\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\066\000\000\000\000\000\
\019\000\026\000\029\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\047\000\037\000\000\000\000\000\000\000\
\030\000\000\000\000\000\070\000\000\000\058\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\068\000\067\000\000\000\
\000\000\034\000\000\000\028\000\000\000\000\000\000\000\000\000\
\065\000\031\000\000\000\000\000\000\000\041\000\033\000"

let yydgoto = "\002\000\
\010\000\011\000\012\000\058\000\014\000\015\000\059\000\029\000\
\031\000\060\000\032\000\061\000\062\000\063\000\064\000\075\000\
\145\000\122\000\065\000\123\000"

let yysindex = "\007\000\
\236\000\000\000\000\000\000\000\000\000\000\000\000\000\213\254\
\000\000\000\000\001\000\000\000\000\000\000\000\000\000\005\255\
\012\255\000\000\000\000\018\255\019\255\121\001\000\000\121\001\
\000\000\230\254\000\000\007\255\087\255\008\255\030\255\027\255\
\000\000\050\255\079\255\000\000\000\000\071\255\121\001\000\000\
\170\255\009\255\186\255\170\255\186\255\186\255\092\255\101\255\
\109\255\186\255\128\001\059\255\000\000\000\000\000\000\000\000\
\104\255\000\000\011\255\116\255\170\255\000\000\000\000\066\001\
\109\001\000\000\179\000\066\255\000\000\000\000\186\255\186\255\
\186\255\117\001\123\255\081\255\130\255\000\000\059\255\076\255\
\000\000\000\000\000\000\186\255\186\255\186\255\186\255\186\255\
\186\255\186\255\186\255\186\255\186\255\186\255\186\255\186\255\
\186\255\186\255\186\255\000\000\000\000\194\000\136\255\209\000\
\000\000\000\000\177\255\000\000\186\255\000\000\126\255\126\255\
\143\255\143\255\132\001\132\001\168\001\168\001\168\001\168\001\
\117\001\155\255\161\255\028\001\117\001\117\001\117\001\170\255\
\186\255\170\255\048\001\084\001\186\255\000\000\000\000\142\255\
\166\255\000\000\179\255\000\000\117\001\170\255\186\255\186\255\
\000\000\000\000\174\255\068\255\170\255\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\013\255\000\000\000\000\000\000\000\000\000\000\000\000\183\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\184\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\185\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\180\255\000\000\000\000\000\000\000\000\000\000\000\000\
\044\000\000\000\000\000\000\000\192\255\000\000\000\000\000\000\
\012\000\000\000\000\000\000\000\000\000\000\000\000\000\180\255\
\000\000\023\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\195\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\241\255\000\000\000\000\000\000\000\000\140\000\164\000\
\092\000\116\000\132\255\173\255\015\255\233\000\240\000\008\001\
\141\255\202\255\000\000\000\000\075\255\111\001\170\001\000\000\
\180\255\000\000\000\000\000\000\000\000\000\000\000\000\118\255\
\000\000\000\000\068\000\000\000\188\255\000\000\030\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\195\000\067\000\000\000\000\000\229\000\000\000\
\000\000\000\000\000\000\171\000\199\255\000\000\213\255\189\255\
\000\000\087\000\210\255\000\000"

let yytablesize = 696
let yytable = "\067\000\
\018\000\069\000\070\000\082\000\103\000\078\000\074\000\001\000\
\017\000\020\000\082\000\020\000\020\000\020\000\022\000\020\000\
\050\000\013\000\050\000\024\000\050\000\050\000\050\000\023\000\
\039\000\033\000\025\000\102\000\074\000\104\000\039\000\038\000\
\108\000\039\000\050\000\050\000\050\000\050\000\050\000\050\000\
\110\000\111\000\112\000\113\000\114\000\115\000\116\000\117\000\
\118\000\119\000\120\000\121\000\124\000\125\000\126\000\127\000\
\021\000\025\000\034\000\037\000\066\000\137\000\080\000\131\000\
\013\000\132\000\043\000\013\000\044\000\101\000\136\000\150\000\
\138\000\041\000\133\000\147\000\059\000\013\000\059\000\045\000\
\059\000\059\000\059\000\025\000\146\000\074\000\040\000\109\000\
\027\000\141\000\035\000\151\000\071\000\046\000\047\000\036\000\
\048\000\049\000\050\000\074\000\121\000\072\000\003\000\004\000\
\005\000\006\000\007\000\026\000\009\000\073\000\057\000\051\000\
\052\000\053\000\054\000\055\000\056\000\057\000\032\000\081\000\
\032\000\032\000\079\000\003\000\004\000\005\000\006\000\007\000\
\026\000\009\000\105\000\032\000\106\000\048\000\107\000\048\000\
\084\000\048\000\048\000\048\000\087\000\088\000\073\000\129\000\
\073\000\032\000\032\000\073\000\032\000\032\000\032\000\048\000\
\048\000\084\000\032\000\032\000\032\000\032\000\032\000\032\000\
\032\000\133\000\134\000\032\000\032\000\032\000\032\000\032\000\
\032\000\032\000\043\000\142\000\044\000\143\000\049\000\149\000\
\049\000\043\000\049\000\049\000\049\000\144\000\023\000\045\000\
\020\000\021\000\043\000\038\000\024\000\074\000\045\000\074\000\
\049\000\049\000\074\000\025\000\071\000\046\000\047\000\045\000\
\048\000\049\000\050\000\072\000\046\000\019\000\003\000\004\000\
\005\000\006\000\007\000\026\000\009\000\046\000\068\000\051\000\
\052\000\053\000\054\000\055\000\056\000\057\000\051\000\052\000\
\053\000\054\000\055\000\056\000\057\000\016\000\148\000\051\000\
\052\000\053\000\054\000\055\000\056\000\057\000\000\000\016\000\
\000\000\000\000\064\000\000\000\064\000\013\000\064\000\064\000\
\064\000\000\000\028\000\064\000\030\000\064\000\064\000\064\000\
\064\000\028\000\000\000\000\000\064\000\064\000\064\000\064\000\
\064\000\064\000\000\000\042\000\000\000\046\000\000\000\046\000\
\000\000\046\000\046\000\046\000\000\000\000\000\046\000\077\000\
\046\000\046\000\046\000\046\000\000\000\000\000\000\000\046\000\
\046\000\046\000\046\000\046\000\046\000\003\000\004\000\005\000\
\006\000\007\000\008\000\009\000\069\000\069\000\000\000\069\000\
\069\000\069\000\069\000\069\000\000\000\000\000\069\000\069\000\
\069\000\069\000\069\000\069\000\069\000\069\000\000\000\069\000\
\069\000\069\000\069\000\069\000\069\000\040\000\000\000\040\000\
\000\000\040\000\040\000\040\000\000\000\000\000\040\000\000\000\
\040\000\040\000\040\000\040\000\000\000\000\000\000\000\040\000\
\040\000\040\000\040\000\040\000\040\000\056\000\000\000\056\000\
\000\000\056\000\056\000\056\000\000\000\000\000\000\000\000\000\
\056\000\056\000\056\000\056\000\000\000\000\000\000\000\056\000\
\056\000\056\000\056\000\056\000\056\000\057\000\000\000\057\000\
\000\000\057\000\057\000\057\000\000\000\000\000\000\000\000\000\
\057\000\057\000\057\000\057\000\000\000\000\000\000\000\057\000\
\057\000\057\000\057\000\057\000\057\000\054\000\000\000\054\000\
\000\000\054\000\054\000\054\000\000\000\000\000\000\000\000\000\
\054\000\054\000\000\000\000\000\000\000\000\000\000\000\054\000\
\054\000\054\000\054\000\054\000\054\000\055\000\000\000\055\000\
\000\000\055\000\055\000\055\000\000\000\000\000\000\000\000\000\
\055\000\055\000\000\000\000\000\100\000\000\000\000\000\055\000\
\055\000\055\000\055\000\055\000\055\000\084\000\000\000\085\000\
\086\000\087\000\088\000\128\000\000\000\000\000\089\000\090\000\
\091\000\092\000\093\000\094\000\084\000\000\000\085\000\086\000\
\087\000\088\000\130\000\000\000\000\000\089\000\090\000\091\000\
\092\000\093\000\094\000\084\000\000\000\085\000\086\000\087\000\
\088\000\000\000\000\000\000\000\089\000\090\000\091\000\092\000\
\093\000\094\000\051\000\000\000\051\000\000\000\051\000\051\000\
\051\000\052\000\000\000\052\000\000\000\052\000\052\000\052\000\
\000\000\000\000\000\000\000\000\051\000\051\000\051\000\051\000\
\051\000\051\000\000\000\052\000\052\000\052\000\052\000\052\000\
\052\000\053\000\000\000\053\000\000\000\053\000\053\000\053\000\
\003\000\004\000\005\000\006\000\007\000\008\000\009\000\000\000\
\000\000\000\000\000\000\053\000\053\000\053\000\053\000\053\000\
\053\000\135\000\000\000\000\000\000\000\000\000\084\000\000\000\
\085\000\086\000\087\000\088\000\000\000\000\000\000\000\089\000\
\090\000\091\000\092\000\093\000\094\000\139\000\000\000\000\000\
\000\000\000\000\084\000\000\000\085\000\086\000\087\000\088\000\
\000\000\000\000\000\000\089\000\090\000\091\000\092\000\093\000\
\094\000\083\000\000\000\000\000\084\000\000\000\085\000\086\000\
\087\000\088\000\000\000\000\000\000\000\089\000\090\000\091\000\
\092\000\093\000\094\000\140\000\000\000\000\000\084\000\000\000\
\085\000\086\000\087\000\088\000\000\000\000\000\000\000\089\000\
\090\000\091\000\092\000\093\000\094\000\095\000\000\000\000\000\
\060\000\096\000\060\000\000\000\060\000\060\000\060\000\000\000\
\097\000\000\000\000\000\000\000\000\000\098\000\099\000\084\000\
\000\000\085\000\086\000\087\000\088\000\000\000\000\000\000\000\
\089\000\090\000\091\000\092\000\093\000\094\000\084\000\000\000\
\085\000\086\000\087\000\088\000\000\000\000\000\000\000\000\000\
\000\000\091\000\092\000\093\000\094\000\003\000\004\000\005\000\
\006\000\007\000\026\000\009\000\003\000\004\000\005\000\006\000\
\007\000\076\000\009\000\061\000\000\000\061\000\000\000\061\000\
\061\000\061\000\084\000\000\000\085\000\086\000\087\000\088\000"

let yycheck = "\043\000\
\000\000\045\000\046\000\061\000\072\000\052\000\050\000\001\000\
\052\001\005\001\068\000\005\001\005\001\005\001\003\001\005\001\
\002\001\005\001\004\001\001\001\006\001\007\001\008\001\006\001\
\002\001\052\001\008\001\071\000\072\000\073\000\008\001\002\001\
\079\000\007\001\020\001\021\001\022\001\023\001\024\001\025\001\
\084\000\085\000\086\000\087\000\088\000\089\000\090\000\091\000\
\092\000\093\000\094\000\095\000\096\000\097\000\098\000\099\000\
\052\001\008\001\052\001\052\001\052\001\129\000\052\001\107\000\
\052\001\109\000\001\001\001\000\003\001\004\001\128\000\004\001\
\130\000\003\001\007\001\143\000\002\001\011\000\004\001\014\001\
\006\001\007\001\008\001\008\001\142\000\129\000\008\001\012\001\
\022\000\133\000\004\001\149\000\001\001\028\001\029\001\029\000\
\031\001\032\001\033\001\143\000\144\000\001\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\001\001\052\001\046\001\
\047\001\048\001\049\001\050\001\051\001\052\001\001\001\004\001\
\003\001\004\001\019\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\008\001\014\001\052\001\002\001\005\001\004\001\
\011\001\006\001\007\001\008\001\015\001\016\001\002\001\008\001\
\004\001\028\001\029\001\007\001\031\001\032\001\033\001\020\001\
\021\001\011\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\007\001\002\001\046\001\047\001\048\001\049\001\050\001\
\051\001\052\001\001\001\030\001\003\001\008\001\002\001\002\001\
\004\001\001\001\006\001\007\001\008\001\003\001\006\001\014\001\
\002\001\002\001\001\001\008\001\004\001\002\001\014\001\004\001\
\020\001\021\001\007\001\004\001\002\001\028\001\029\001\014\001\
\031\001\032\001\033\001\002\001\028\001\011\000\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\028\001\044\000\046\001\
\047\001\048\001\049\001\050\001\051\001\052\001\046\001\047\001\
\048\001\049\001\050\001\051\001\052\001\001\000\144\000\046\001\
\047\001\048\001\049\001\050\001\051\001\052\001\255\255\011\000\
\255\255\255\255\002\001\255\255\004\001\005\001\006\001\007\001\
\008\001\255\255\022\000\011\001\024\000\013\001\014\001\015\001\
\016\001\029\000\255\255\255\255\020\001\021\001\022\001\023\001\
\024\001\025\001\255\255\039\000\255\255\002\001\255\255\004\001\
\255\255\006\001\007\001\008\001\255\255\255\255\011\001\051\000\
\013\001\014\001\015\001\016\001\255\255\255\255\255\255\020\001\
\021\001\022\001\023\001\024\001\025\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\001\001\002\001\255\255\004\001\
\005\001\006\001\007\001\008\001\255\255\255\255\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\255\255\020\001\
\021\001\022\001\023\001\024\001\025\001\002\001\255\255\004\001\
\255\255\006\001\007\001\008\001\255\255\255\255\011\001\255\255\
\013\001\014\001\015\001\016\001\255\255\255\255\255\255\020\001\
\021\001\022\001\023\001\024\001\025\001\002\001\255\255\004\001\
\255\255\006\001\007\001\008\001\255\255\255\255\255\255\255\255\
\013\001\014\001\015\001\016\001\255\255\255\255\255\255\020\001\
\021\001\022\001\023\001\024\001\025\001\002\001\255\255\004\001\
\255\255\006\001\007\001\008\001\255\255\255\255\255\255\255\255\
\013\001\014\001\015\001\016\001\255\255\255\255\255\255\020\001\
\021\001\022\001\023\001\024\001\025\001\002\001\255\255\004\001\
\255\255\006\001\007\001\008\001\255\255\255\255\255\255\255\255\
\013\001\014\001\255\255\255\255\255\255\255\255\255\255\020\001\
\021\001\022\001\023\001\024\001\025\001\002\001\255\255\004\001\
\255\255\006\001\007\001\008\001\255\255\255\255\255\255\255\255\
\013\001\014\001\255\255\255\255\002\001\255\255\255\255\020\001\
\021\001\022\001\023\001\024\001\025\001\011\001\255\255\013\001\
\014\001\015\001\016\001\002\001\255\255\255\255\020\001\021\001\
\022\001\023\001\024\001\025\001\011\001\255\255\013\001\014\001\
\015\001\016\001\002\001\255\255\255\255\020\001\021\001\022\001\
\023\001\024\001\025\001\011\001\255\255\013\001\014\001\015\001\
\016\001\255\255\255\255\255\255\020\001\021\001\022\001\023\001\
\024\001\025\001\002\001\255\255\004\001\255\255\006\001\007\001\
\008\001\002\001\255\255\004\001\255\255\006\001\007\001\008\001\
\255\255\255\255\255\255\255\255\020\001\021\001\022\001\023\001\
\024\001\025\001\255\255\020\001\021\001\022\001\023\001\024\001\
\025\001\002\001\255\255\004\001\255\255\006\001\007\001\008\001\
\037\001\038\001\039\001\040\001\041\001\042\001\043\001\255\255\
\255\255\255\255\255\255\020\001\021\001\022\001\023\001\024\001\
\025\001\006\001\255\255\255\255\255\255\255\255\011\001\255\255\
\013\001\014\001\015\001\016\001\255\255\255\255\255\255\020\001\
\021\001\022\001\023\001\024\001\025\001\006\001\255\255\255\255\
\255\255\255\255\011\001\255\255\013\001\014\001\015\001\016\001\
\255\255\255\255\255\255\020\001\021\001\022\001\023\001\024\001\
\025\001\008\001\255\255\255\255\011\001\255\255\013\001\014\001\
\015\001\016\001\255\255\255\255\255\255\020\001\021\001\022\001\
\023\001\024\001\025\001\008\001\255\255\255\255\011\001\255\255\
\013\001\014\001\015\001\016\001\255\255\255\255\255\255\020\001\
\021\001\022\001\023\001\024\001\025\001\001\001\255\255\255\255\
\002\001\005\001\004\001\255\255\006\001\007\001\008\001\255\255\
\012\001\255\255\255\255\255\255\255\255\017\001\018\001\011\001\
\255\255\013\001\014\001\015\001\016\001\255\255\255\255\255\255\
\020\001\021\001\022\001\023\001\024\001\025\001\011\001\255\255\
\013\001\014\001\015\001\016\001\255\255\255\255\255\255\255\255\
\255\255\022\001\023\001\024\001\025\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\037\001\038\001\039\001\040\001\
\041\001\042\001\043\001\002\001\255\255\004\001\255\255\006\001\
\007\001\008\001\011\001\255\255\013\001\014\001\015\001\016\001"

let yynames_const = "\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  LBRACKET\000\
  RBRACKET\000\
  COMMA\000\
  SEMI\000\
  SQUOTE\000\
  DQUOTE\000\
  MOD\000\
  ASSIGN\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  PLUSEQ\000\
  MINUSEQ\000\
  DOT\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  AND\000\
  OR\000\
  NOT\000\
  IF\000\
  ELSE\000\
  FOR\000\
  WHILE\000\
  RETURN\000\
  BREAK\000\
  CONTINUE\000\
  NOELSE\000\
  INT\000\
  FLOAT\000\
  CHAR\000\
  STRING\000\
  VOID\000\
  STRUCT\000\
  SOCKET\000\
  TCP\000\
  UDP\000\
  NEW\000\
  DELETE\000\
  EOF\000\
  "

let yynames_block = "\
  INTLIT\000\
  CHARLIT\000\
  FLOATLIT\000\
  STRLIT\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    Obj.repr(
# 48 "parser.mly"
              ( Program(List.rev _1) )
# 463 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'decl) in
    Obj.repr(
# 51 "parser.mly"
               ( _2::_1 )
# 471 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'decl) in
    Obj.repr(
# 52 "parser.mly"
           ( [_1] )
# 478 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 55 "parser.mly"
           ( Vdecl(_1) )
# 485 "parser.ml"
               : 'decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'sdecl) in
    Obj.repr(
# 56 "parser.mly"
           ( Sdecl(_1) )
# 492 "parser.ml"
               : 'decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 57 "parser.mly"
           ( Fdecl(_1) )
# 499 "parser.ml"
               : 'decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 60 "parser.mly"
           ( Void )
# 505 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 61 "parser.mly"
            ( Char )
# 511 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 62 "parser.mly"
           ( Int )
# 517 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 63 "parser.mly"
             ( Float )
# 523 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 64 "parser.mly"
              ( String )
# 529 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 65 "parser.mly"
              ( Socket )
# 535 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 66 "parser.mly"
                 ( Struct(_2) )
# 542 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    Obj.repr(
# 67 "parser.mly"
                            ( Array(_1) )
# 549 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'vdecls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 70 "parser.mly"
                 ( _2::_1 )
# 557 "parser.ml"
               : 'vdecls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 71 "parser.mly"
            ( [_1] )
# 564 "parser.ml"
               : 'vdecls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 74 "parser.mly"
                ( {vtyp = _1; vname = _2} )
# 572 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'vdecls) in
    Obj.repr(
# 77 "parser.mly"
                                            ( {name = _2; members = List.rev _4} )
# 580 "parser.ml"
               : 'sdecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'opt_params) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'opt_stmts) in
    Obj.repr(
# 81 "parser.mly"
                    ( {t = _1; name = _2; parameters = _4; body = _7} )
# 590 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 84 "parser.mly"
    ( [] )
# 596 "parser.ml"
               : 'opt_params))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'params) in
    Obj.repr(
# 85 "parser.mly"
             ( List.rev _1 )
# 603 "parser.ml"
               : 'opt_params))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 88 "parser.mly"
           ( [ Id(_1, _2) ] )
# 611 "parser.ml"
               : 'params))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'params) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 89 "parser.mly"
                          ( Id(_3, _4) :: _1 )
# 620 "parser.ml"
               : 'params))
; (fun __caml_parser_env ->
    Obj.repr(
# 93 "parser.mly"
    ( [] )
# 626 "parser.ml"
               : 'opt_stmts))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'stmts) in
    Obj.repr(
# 94 "parser.mly"
            ( List.rev _1 )
# 633 "parser.ml"
               : 'opt_stmts))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmts) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 97 "parser.mly"
                 ( _2::_1 )
# 641 "parser.ml"
               : 'stmts))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 98 "parser.mly"
           ( [_1] )
# 648 "parser.ml"
               : 'stmts))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 101 "parser.mly"
                            ( Vdecl_assign({vtyp = _1; vname = _2}, _4) )
# 657 "parser.ml"
               : 'vdecl_assign))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 106 "parser.mly"
              ( Expr(_1) )
# 664 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'opt_expr) in
    Obj.repr(
# 107 "parser.mly"
                           ( Return(_2) )
# 671 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 108 "parser.mly"
                                              ( If(_3, _5, _7) )
# 680 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 109 "parser.mly"
                                              ( If(_3, _5, Block([])) )
# 688 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'opt_expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'opt_expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'opt_expr) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 110 "parser.mly"
                                                                  ( For(_3, _5, _7, _9) )
# 698 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 111 "parser.mly"
                                    ( While(_3, _5) )
# 706 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 112 "parser.mly"
            ( Vdecl(_1) )
# 713 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl_assign) in
    Obj.repr(
# 113 "parser.mly"
                   ( _1 )
# 720 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmts) in
    Obj.repr(
# 114 "parser.mly"
                          ( Block(List.rev _2) )
# 727 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 117 "parser.mly"
    ( Noexpr )
# 733 "parser.ml"
               : 'opt_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 118 "parser.mly"
           ( _1 )
# 740 "parser.ml"
               : 'opt_expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 121 "parser.mly"
        ( [] )
# 746 "parser.ml"
               : 'opt_arraylit))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'args) in
    Obj.repr(
# 122 "parser.mly"
                         ( _2 )
# 753 "parser.ml"
               : 'opt_arraylit))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 125 "parser.mly"
                          ( Intlit(_1) )
# 760 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 126 "parser.mly"
                          ( Charlit(_1) )
# 767 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 127 "parser.mly"
                          ( Floatlit(_1) )
# 774 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 128 "parser.mly"
                          ( Strlit(_1) )
# 781 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'id) in
    Obj.repr(
# 129 "parser.mly"
                          ( Rid(_1) )
# 788 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 130 "parser.mly"
                          ( _2 )
# 795 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 131 "parser.mly"
                          ( Binop(_1, Eq, _3) )
# 803 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 132 "parser.mly"
                          ( Binop(_1, Neq, _3) )
# 811 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 133 "parser.mly"
                          ( Binop(_1, Lt, _3))
# 819 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 134 "parser.mly"
                          ( Binop(_1, Leq, _3))
# 827 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 135 "parser.mly"
                          ( Binop(_1, Gt, _3) )
# 835 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 136 "parser.mly"
                          ( Binop(_1, Geq, _3) )
# 843 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 137 "parser.mly"
                          ( Binop(_1, Add, _3) )
# 851 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 138 "parser.mly"
                          ( Binop(_1, Sub, _3) )
# 859 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 139 "parser.mly"
                          ( Binop(_1, Mul, _3) )
# 867 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 140 "parser.mly"
                          ( Binop(_1, Div, _3) )
# 875 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 141 "parser.mly"
                          ( Binop(_1, Mod, _3) )
# 883 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'id) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 142 "parser.mly"
                          ( Binassop(_1, Assign, _3) )
# 891 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'id) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 143 "parser.mly"
                          ( Binassop(_1, PlusEq, _3) )
# 899 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'id) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 144 "parser.mly"
                          ( Binassop(_1, MinusEq, _3) )
# 907 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 145 "parser.mly"
                           ( Unop(Minus, _2) )
# 914 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 146 "parser.mly"
               ( Unop(Not, _2) )
# 921 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 147 "parser.mly"
                    ( New(Struct(_3)) )
# 928 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'opt_arraylit) in
    Obj.repr(
# 148 "parser.mly"
                                                  ( New(ArrayLit(_2, _4, _6)) )
# 937 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'id) in
    Obj.repr(
# 149 "parser.mly"
                ( Delete(_2) )
# 944 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'id) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 150 "parser.mly"
                                ( Index(_1, _3) )
# 952 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'id) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'opt_args) in
    Obj.repr(
# 151 "parser.mly"
                                ( Call(_1, _3) )
# 960 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 154 "parser.mly"
       ( FinalID(Id(typeof _1, _1)) )
# 967 "parser.ml"
               : 'id))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'id) in
    Obj.repr(
# 155 "parser.mly"
                ( RID(_3, _1) )
# 975 "parser.ml"
               : 'id))
; (fun __caml_parser_env ->
    Obj.repr(
# 158 "parser.mly"
    ( [] )
# 981 "parser.ml"
               : 'opt_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'args) in
    Obj.repr(
# 159 "parser.mly"
           ( List.rev _1 )
# 988 "parser.ml"
               : 'opt_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 162 "parser.mly"
         ( [_1] )
# 995 "parser.ml"
               : 'args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'args) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 163 "parser.mly"
                      ( _3 :: _1 )
# 1003 "parser.ml"
               : 'args))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
